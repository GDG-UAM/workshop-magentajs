// File: Taller/demos/coconet/coconet.js
// Demo de Coconet (armonizaci√≥n a 4 voces) para el taller.
//
// Qu√© muestra esta demo:
//  - C√≥mo precargar el modelo para evitar la latencia del primer uso.
//  - C√≥mo crear una semilla sencilla (ESCALA MAYOR REAL) como l√≠nea de soprano.
//  - C√≥mo llamar a coco.harmonize(seed) para obtener 4 voces.
//  - Un bot√≥n A/B para escuchar "antes" (semilla) y "despu√©s" (armonizado).
//
// Qu√© tocan los alumnos:
//  - SOLO la zona marcada como ‚ÄúZONA EDITABLE‚Äù: instanciar CoconetService
//    con su checkpoint y (si quieren) cambiar hiperpar√°metros/labels/botones.

import { CoconetService } from '../../lib/models/coconet.js';
import { makeMajorScale } from '../../lib/models/baseline.js';
import { CHECKPOINTS, WORKSHOP } from '../../lib/config/constants.js';

export function setup({ app, panel }) {
  // ------------------------------------------------------------
  // 0) Marco visual
  // ------------------------------------------------------------
  panel.innerHTML = '';
  const title = document.createElement('h4');
  title.textContent = 'Demo: Coconet (armonizaci√≥n a 4 voces)';
  const help = document.createElement('p');
  help.innerHTML =
    '1) Crea una <em>semilla monof√≥nica</em> (soprano). ' +
    '2) Pulsa ‚ÄúArmonizar‚Äù para obtener S/A/T/B. ' +
    '3) Usa ‚ÄúA/B‚Äù para o√≠r antes ‚áÑ despu√©s.';
  panel.appendChild(title);
  panel.appendChild(help);

  const mkBtn = (label) => {
    const b = document.createElement('button');
    b.textContent = label;
    panel.appendChild(b);
    return b;
  };

  // ------------------------------------------------------------
  // 1) Par√°metros del taller
  // ------------------------------------------------------------
  const { QPM, SPQ } = WORKSHOP;

  // ------------------------------------------------------------
  // 2) ZONA EDITABLE POR EL ALUMNO
  //    Instancia del modelo y (si se quiere) hiperpar√°metros por defecto.
  // ------------------------------------------------------------
  const coco = new CoconetService({
    checkpointURL: CHECKPOINTS.coconet.bach, // ‚Üê checkpoint Bach Coconet
    qpm: QPM,
    stepsPerQuarter: SPQ,
    numIterations: 64,   // m√°s iteraciones = m√°s coherente (y m√°s lento)
    temperature: 0.99    // m√°s alto = m√°s aleatorio/creativo
  });

  // ------------------------------------------------------------
  // 3) Botones de la demo y estado local
  // ------------------------------------------------------------
  const btnPreload = mkBtn('Pre-cargar Coconet');
  const btnSeed    = mkBtn('Semilla: Escala Mayor (soprano)');
  const btnHarm    = mkBtn('IA: Armonizar 4 voces');
  const btnAB      = mkBtn('A/B: Semilla ‚áÑ Harmonizado');

  // Guardamos las √∫ltimas versiones para el A/B
  let lastSeed = null;       // NoteSequence monof√≥nica
  let lastHarm = null;       // NoteSequence a 4 voces
  let abToggle = false;      // false = semilla, true = armonizado

  // ------------------------------------------------------------
  // 4) L√≥gica (no necesitan tocarla)
  // ------------------------------------------------------------

  // Precargar modelo
  btnPreload.onclick = async () => {
    const prev = btnPreload.textContent;
    btnPreload.disabled = true;
    btnPreload.textContent = 'Cargando‚Ä¶ ‚è≥';
    try {
      await coco.initialize();
      btnPreload.textContent = 'Coconet listo ‚úÖ';
    } catch (e) {
      console.error('Preload Coconet error:', e);
      alert('No se pudo cargar Coconet: ' + (e?.message || String(e)));
      btnPreload.textContent = prev;
      btnPreload.disabled = false;
    }
  };

  // Semilla = ESCALA MAYOR REAL (Do mayor, 1 octava, semicorcheas)
  btnSeed.onclick = () => {
    lastSeed = makeMajorScale({
      tonic: 60,       // C4
      octaves: 1,
      durBeats: 0.25,  // semicorchea
      qpm: QPM
    });
    app.loadTrack(lastSeed, { name: 'Semilla (Escala mayor ‚Äì Soprano)', program: 0 });
    // A/B vuelve a "antes"
    abToggle = false;
  };

  // Armonizar 4 voces con Coconet
  btnHarm.onclick = async () => {
    const prev = btnHarm.textContent;
    btnHarm.disabled = true;
    btnHarm.textContent = 'Armonizando‚Ä¶ üß†';

    try {
      await coco.initialize();

      // Semilla = si hay alguna en estado actual, √∫sala; si no, la que guardamos
      const { current } = app.getState();
      const seed = (current && current.notes?.length) ? current : lastSeed;

      if (!seed || !(seed.notes?.length)) {
        alert('Primero crea/activa una MELOD√çA monof√≥nica (pulsa ‚ÄúSemilla‚Ä¶‚Äù si quieres).');
        return;
      }

      // Generar armonizaci√≥n
      lastHarm = await coco.harmonize(seed, {
        temperature: 0.98,
        numIterations: 64
      });

      // Cargar como pista nueva (la UI la mostrar√° en la lista)
      app.loadTrack(lastHarm, { name: 'Coconet ‚Äì 4 voces', program: 0 });

      // Ajustamos el A/B a "despu√©s"
      abToggle = true;
      app.replaceMain(lastHarm);
    } catch (e) {
      console.error('Coconet harmonize error:', e);
      alert('Error en Coconet: ' + (e?.message || String(e)));
    } finally {
      btnHarm.textContent = prev;
      btnHarm.disabled = false;
    }
  };

  // A/B: escuchar ANTES (semilla) ‚áÑ DESPU√âS (armonizado)
  btnAB.onclick = () => {
    if (!lastSeed || !lastSeed.notes?.length) {
      alert('No hay semilla disponible. Crea una con ‚ÄúSemilla: Escala Mayor‚Äù.');
      return;
    }
    if (!lastHarm || !lastHarm.notes?.length) {
      alert('A√∫n no hay ‚Äúdespu√©s‚Äù. Pulsa ‚ÄúArmonizar 4 voces‚Äù primero.');
      return;
    }
    abToggle = !abToggle;
    const which = abToggle ? lastHarm : lastSeed;
    app.replaceMain(which);
    btnAB.textContent = abToggle ? 'A/B: ‚Üê Volver a Semilla' : 'A/B: Ver Harmonizado ‚Üí';
  };

  // Nota final
  const foot = document.createElement('p');
  foot.style.marginTop = '0.5rem';
  foot.style.fontSize = '0.9em';
  foot.style.color = '#777';
  foot.innerHTML =
    'Sugerencia: usa semillas simples (monof√≥nicas) para resultados limpios. ' +
    'Coconet completa Alto/Tenor/Bajo desde la l√≠nea de soprano.';
  panel.appendChild(foot);
}
